<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on</title><link>/posts/</link><description>Recent content in Posts on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 22 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>walkable.lol</title><link>/posts/2025-03-22/walkable-bot/</link><pubDate>Sat, 22 Mar 2025 00:00:00 +0000</pubDate><guid>/posts/2025-03-22/walkable-bot/</guid><description/></item><item><title>PTPX 2024</title><link>/posts/2024-12-19/ptpx-2024/</link><pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate><guid>/posts/2024-12-19/ptpx-2024/</guid><description>&lt;p>Well, I&amp;rsquo;ve had my &lt;a href="/posts/2024-02-25/3d-printer-pen-plotter-conversion/">converted 3D printer / pen plotter&lt;/a> up and running for most of the year now. It&amp;rsquo;s been working great, and so for one last challenge before the end of the year, I decided to participate in the annual pen plotter postcard exchange (&lt;a href="https://buttondown.com/ptpx">PTPX&lt;/a>). Started by &lt;a href="https://paulbutler.org/">Paul Butler&lt;/a> and currently in its fifth season, PTPX is a &amp;ldquo;&lt;a href="https://paulbutler.org/2022/generalizing-secret-santa-with-integer-programming-in-julia/">generalized secret santa&lt;/a>&amp;rdquo; for plotter enthusiasts. The only challenge now is to figure out what to plot!&lt;/p></description></item><item><title>How many slices of pizza did I just burn?</title><link>/posts/2024-12-08/yams/</link><pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate><guid>/posts/2024-12-08/yams/</guid><description>&lt;p>Earlier this summer, I was at the beach with my family and given we were at the beach and the weather was hot, the &lt;a href="https://en.wikipedia.org/wiki/Drumstick_(frozen_dairy_dessert)">drumsticks&lt;/a> were flowing like water. This inevitably led to questions like: how far do I need to run to burn off this drumstick? I know that at my weight (~185 lbs) and at a moderate pace (5:45 to 6:00), I burn about 125 calories per mile. So at 390 calories per drumstick, I need to log about 3 miles tomorrow in order to break even. Assuming I stop at just one drumstick…&lt;/p></description></item><item><title>Biking from Nashville to Natchez</title><link>/posts/2024-12-06/biking-natchez-trace/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><guid>/posts/2024-12-06/biking-natchez-trace/</guid><description>&lt;p>I had never heard of the &lt;a href="https://en.wikipedia.org/wiki/Natchez_Trace_Parkway">Natchez Trace&lt;/a> before Aaron mentioned it to me earlier this summer. We were discussing what our early summer adventure should be, and Aaron (being a closet southerner) was pushing for it. This was actually ideal, because nowadays when it comes to stuff like this, I try to do as little research as possible. It&amp;rsquo;s not going to be an adventure if you already know the route. So with that, we rented a pickup truck and headed off to Nashville.&lt;/p></description></item><item><title>Pen plotting with a 3D printer</title><link>/posts/2024-02-25/3d-printer-pen-plotter-conversion/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>/posts/2024-02-25/3d-printer-pen-plotter-conversion/</guid><description>&lt;p>Of all the things I&amp;rsquo;m not good at, it&amp;rsquo;s my lack of artistic ability that really steals the show. Anything involving &amp;ldquo;art&amp;rdquo; I can pretty much guarantee will result in disappointment. It&amp;rsquo;s a bummer, but it&amp;rsquo;s not all bad though. My artistic shortcomings are offset by a surplus in other areas like math and engineering. I suppose it&amp;rsquo;s this imbalance that fuels my curiosity with the &lt;a href="https://en.wikipedia.org/wiki/Generative_art">generative art&lt;/a> community; especially the stuff involving &lt;a href="https://piratefsh.github.io/2019/01/07/computer-art-history-part-2.html">pen plotters&lt;/a>.&lt;/p></description></item><item><title>Porting windspeed.app to Go</title><link>/posts/2023-11-19/windspeed-golang-serverless/</link><pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate><guid>/posts/2023-11-19/windspeed-golang-serverless/</guid><description>&lt;p>I&amp;rsquo;ve been running &lt;a href="https://windspeed.app/">a small web service&lt;/a> that adds weather details to Strava activities for the past year or so. It&amp;rsquo;s a super simple Python/Flask app that I actually just forked from &lt;a href="https://github.com/vol1ura">Yuriy Volodin&lt;/a>, made &lt;a href="https://github.com/vol1ura/strava_weather_app/compare/master...nathanrooy:strava-weather-service:master">a couple changes&lt;/a>, and deployed it with &lt;a href="https://railway.app/">Railway.app&lt;/a>. It&amp;rsquo;s been working without incident ever since.&lt;/p>
&lt;p style="background-color: var(--background-light); padding-top:2rem; padding-bottom:2rem; margin-top:2rem; margin-bottom:2rem;">
 &lt;img style="max-height:650px; max-width:80%; margin-top:0rem; margin-bottom:0rem;" src="example-weather-stamp.png" alt="example weather stamp from windspeed.app" />
&lt;/p>
&lt;p>The Railway.app experience has been great and I really like the platform, but it’s the wrong tool for the job. Even though there are about 200 active subscribers using the service, having a dedicated server that&amp;rsquo;s running continuously is a bit much.&lt;/p></description></item><item><title>3DPK: Hell Gate + Bronx Kill</title><link>/posts/2023-08-27/3dpk-hell-gate-and-bronx-kill/</link><pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate><guid>/posts/2023-08-27/3dpk-hell-gate-and-bronx-kill/</guid><description>&lt;p>If I had a nickel for every time I&amp;rsquo;ve circumnavigated Manhattan in my &lt;a href="/posts/2023-03-12/3d-printed-kayak/">3d printed kayak&lt;/a>, I&amp;rsquo;d have 10 cents! But seriously though, there are so many interesting areas around here to explore it&amp;rsquo;s hard to decide where to go next. On &lt;a href="https://www.strava.com/activities/9528805583">this latest trip&lt;/a>, I opted for the &lt;a href="https://en.wikipedia.org/wiki/Hell_Gate">Hell Gate region&lt;/a> of the East River and a small stream separating Randalls Island from the Bronx known as &lt;a href="https://en.wikipedia.org/wiki/Bronx_Kill">Bronx Kill&lt;/a>. Topography in this area has produced a lengthy history of shipwrecks and other unfortunate events, but through a &lt;a href="https://en.wikipedia.org/wiki/Removal_of_Hell_Gate_rocks">fairly extensive effort&lt;/a> has been substantially tamed. It does also feature one of the &lt;a href="https://en.wikipedia.org/wiki/Hell_Gate_Bridge">better looking bridges&lt;/a>&amp;hellip;&lt;/p></description></item><item><title>Circumnavigating Manhattan with a 3D printed kayak</title><link>/posts/2023-06-23/3dpk-circumnavigate-manhattan/</link><pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate><guid>/posts/2023-06-23/3dpk-circumnavigate-manhattan/</guid><description>&lt;p>Last month (May) the water was warm enough around here that &lt;a href="https://www.strava.com/activities/9066841643">I decided to go for it&lt;/a> and see if my &lt;a href="/posts/2023-03-12/3d-printed-kayak/">3D printed kayak&lt;/a> could survive a Manhattan circumnavigation. I learned from last summer that the ideal launch time is around &lt;a href="http://all-nyc-yachts.com/Currents%20and%20Tides.html">one hour after low tide&lt;/a> at the battery. With that in mind, I was leaving the &lt;a href="https://en.wikipedia.org/wiki/New_York_Central_Railroad_69th_Street_Transfer_Bridge">69th Street Transfer Bridge&lt;/a> and making my way down the Hudson by 11am. Although it was pretty hot out, it remained overcast all day making it much more manageable. Other than a gallon jug of water, I didn&amp;rsquo;t do much planning. I have a pretty good idea of how large Manhattan is &lt;a href="/bike-exploring/nyc/">from biking&lt;/a> so I was hoping I would be back within 12 hours or so. With the currents doing all of the work, I was within sight of Battery Park in an hour.&lt;/p></description></item><item><title>A visual book recommender</title><link>/posts/2023-04-12/visual-book-recommender/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/2023-04-12/visual-book-recommender/</guid><description>&lt;h2>Introduction&lt;/h2>
&lt;p>I have this long running conjecture that used book stores are superior to commercial book outlets (including Amazon) for discovering books. One of the reasons for this I think has less to do with a skewed explore/exploit strategy, and more to do with the way exploratory suggestions are sourced. I think financial pressure skews exploratory search suggestions towards oversampling newer books rather than older adjacent books. I get that though; oversampling newer books is a simple way to help combat the rich getting richer trap. The problem is that I&amp;rsquo;m biased against new books; I think they&amp;rsquo;re mostly noise. Used books stores on the other hand are curated by humans for other humans (who probably live nearby). If I ask for a book that&amp;rsquo;s like &amp;ldquo;x&amp;rdquo; they&amp;rsquo;re not going to point me to the newer version of &amp;ldquo;x&amp;rdquo;, they&amp;rsquo;re going to show me books &amp;ldquo;y&amp;rdquo; and &amp;ldquo;z&amp;rdquo;. There are additional reasons that go beyond just oversampling newer books which I&amp;rsquo;ll touch on later. I&amp;rsquo;ll also admit that all the supporting evidence I have is completely anecdotal, but still, when I want a new book I don&amp;rsquo;t pull out my phone, I walk down the street to the used book store.&lt;/p></description></item><item><title>3D printing a full-size kayak</title><link>/posts/2023-03-12/3d-printed-kayak/</link><pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate><guid>/posts/2023-03-12/3d-printed-kayak/</guid><description>&lt;h2>Introduction&lt;/h2>
&lt;p>Well, I&amp;rsquo;m nearly two years behind on posting this, but anyway, here we are. I started this thing right at the beginning of &amp;ldquo;lockdown&amp;rdquo; and at the time we had just left our place in Manhattan for a lake house in Ohio. With ample space and views of water I began to mentally reprioritize my side-project backlog. It wasn&amp;rsquo;t long before I started dabbling with the idea of finally getting into 3D printing. I&amp;rsquo;ve worked with various additive manufacturing techniques in the past through work, but never on a hobby/personal level. I also wanted a kayak so I could explore the lake so it seemed like a good fit.&lt;/p></description></item><item><title>Turboshtein</title><link>/posts/2022-11-03/turboshtein/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>/posts/2022-11-03/turboshtein/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>I didn&amp;rsquo;t study computer science so the usefulness of bit shifts and other &lt;a href="https://en.wikipedia.org/wiki/Bitwise_operation">bitwise operations&lt;/a> outside of low-level programming have always been a bit of a gray area for me. I finally gave in and decided to spend some time reading up on the subject and ended up implementing the &lt;em>Myers bit-vector algorithm&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for computing &lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein edit distance&lt;/a>. I was fairly happy with the results so I wrapped the original C code in Python and uploaded it to &lt;a href="https://pypi.org/project/turboshtein/">PyPI&lt;/a>. Coincidentally, it&amp;rsquo;s also pretty fast.&lt;/p></description></item><item><title>Playing around with Dall·E 2</title><link>/posts/2022-05-08/dall-e-2/</link><pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate><guid>/posts/2022-05-08/dall-e-2/</guid><description>&lt;p>About a month ago OpenAI reached out to a few of my coworkers and myself and gave us early access to the new &lt;a href="https://openai.com/dall-e-2/" target="_blank">Dall·E 2&lt;/a> model. I&amp;rsquo;ve been playing around with it in my freetime and wanted share some of the images. Here are some of my favorites along with the prompt I used to generate them.&lt;/p>
&lt;div class="img-block" style="margin-top:5rem;">
 &lt;img src="imgs_web/DALL-E_2022-04-25_12.52.13.jpg" loading="eager" alt="a monkey wearing a rocket pack flying over the jungle, digital art">
 &lt;div class="dalle-prompt">
 &lt;i>"a monkey wearing a rocket pack flying over the jungle, digital art"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;img src="imgs_web/DALL-E_2022-04-28_09.16.54.jpg" loading="eager" alt="a tiger with fur made out of electricity, digital art">
 &lt;div class="dalle-prompt">
 &lt;i>"a tiger with fur made out of electricity, digital art"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;img src="imgs_web/DALL-E_2022-04-25_12.45.31.jpg" loading="eager" alt="a cowboy riding a giant eagle, digital art">
 &lt;div class="dalle-prompt">
 &lt;i>"a cowboy riding a giant eagle, digital art"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block tblock">
 &lt;table class="three-img">
 &lt;tr>
 &lt;td class="left">
 &lt;img src="imgs_web/DALL-E_2022-04-25_10.28.43.jpg" loading="lazy" alt="a city on an island floating in the sky with clouds in the background, digital art - version 1">
 &lt;/td>
 &lt;td class="inside">
 &lt;img src="imgs_web/DALL-E_2022-04-25_10.28.35.jpg" loading="lazy" alt="a city on an island floating in the sky with clouds in the background, digital art - version 2">
 &lt;/td>
 &lt;td class="right">
	 &lt;img src="imgs_web/DALL-E_2022-04-25_10.31.16.jpg" loading="lazy" alt="a city on an island floating in the sky with clouds in the background, digital art - version 3">
 &lt;/td>
 &lt;/tr>
 &lt;/table>
 &lt;div class="dalle-prompt">
 &lt;i>"a city on an island floating in the sky with clouds in the background, digital art"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;table class="two-img">
 &lt;tr>
 &lt;td class="left">
 &lt;img src="imgs_web/DALL-E_2022-04-28_09.21.14.jpg" loading="lazy" alt="a wolf with fur made of neon light, digital art - version 1">
 &lt;/td>
 &lt;td class="right">
 &lt;img src="imgs_web/DALL-E_2022-04-28_09.20.22.jpg" loading="lazy" alt="a wolf with fur made of neon light, digital art - version 2">
 &lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td class="left">
 &lt;img src="imgs_web/DALL-E_2022-04-28_09.20.01.jpg" loading="lazy" alt="a wolf with fur made of neon light, digital art - version 3">
 &lt;/td>
 &lt;td class="right">
 &lt;img src="imgs_web/DALL-E_2022-04-28_09.22.37.jpg" loading="lazy" alt="a wolf with fur made of neon light, digital art - version 4">
 &lt;/td>
 &lt;/tr>
 &lt;/table>
 &lt;div class="dalle-prompt">
 &lt;i>"a wolf with fur made of neon light, digital art"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;table class="two-img">
 &lt;tr>
 &lt;td class="left">
 &lt;img src="imgs_web/DALL-E_2022-04-25_12.21.28.jpg" loading="lazy" alt="a futuristic underground city, digital art - version 1">
 &lt;/td>
 &lt;td class="right">
 &lt;img src="imgs_web/DALL-E_2022-04-25_12.23.18.jpg" loading="lazy" alt="a futuristic underground city, digital art - version 2">
 &lt;/td>
 &lt;/tr>
 &lt;/table>
 &lt;div class="dalle-prompt">
 &lt;i>"a futuristic underground city, digital art"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;table class="two-img">
 &lt;tr>
 &lt;td class="left">
 &lt;img src="imgs_web/DALL-E_2022-05-08_11.40.08.jpg" loading="lazy" alt="a small village in the mountains rendered as a low poly model - version 1">
 &lt;/td>
 &lt;td class="right">
 &lt;img src="imgs_web/DALL-E_2022-05-08_11.18.45.jpg" loading="lazy" alt="a small village in the mountains rendered as a low poly model - version 2">
 &lt;/td>
 &lt;/tr>
 &lt;/table>
 &lt;div class="dalle-prompt">
 &lt;i>"a small village in the mountains rendered as a low poly model"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;img src="imgs_web/DALL-E_2022-04-22_13.58.51.jpg" loading="lazy" alt="a synthwave bike ride through the clouds">
 &lt;div class="dalle-prompt">
 &lt;i>"a synthwave bike ride through the clouds"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;table class="two-img">
 &lt;tr>
 &lt;td class="left">
 &lt;img src="imgs_web/DALL-E_2022-04-22_14.06.22.jpg" loading="lazy" alt="biking through a beautiful city depicted as an exploding nebula, oil painting - version 1">
 &lt;/td>
 &lt;td class="right">
 &lt;img src="imgs_web/DALL-E_2022-04-22_14.19.42.jpg" loading="lazy" alt="biking through a beautiful city depicted as an exploding nebula, oil painting - version 2">
 &lt;/td>
 &lt;/tr>
 &lt;/table>
 &lt;div class="dalle-prompt">
 &lt;i>"biking through a beautiful city depicted as an exploding nebula, oil painting"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;table class="two-img">
 &lt;tr>
 &lt;td class="left">
 &lt;img src="imgs_web/DALL-E_2022-04-25_12.41.16.jpg" loading="lazy" alt="a cowboy riding a giant lizard in a rodeo, digital art - version 1">
 &lt;/td>
 &lt;td class="right">
 &lt;img src="imgs_web/DALL-E_2022-04-25_12.43.01.jpg" loading="lazy" alt="a cowboy riding a giant lizard in a rodeo, digital art - version 2">
 &lt;/td>
 &lt;/tr>
 &lt;/table>
 &lt;div class="dalle-prompt">
 &lt;i>"a cowboy riding a giant lizard in a rodeo, digital art"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block">
 &lt;table class="two-img">
 &lt;tr>
 &lt;td class="left">
 &lt;img src="imgs_web/DALL-E_2022-04-25_12.27.59.jpg" loading="lazy" alt="a futuristic city desert oasis full of gardens, people, and neon jellyfish in the background, digital art - version 1">
 &lt;/td>
 &lt;td class="right">
 &lt;img src="imgs_web/DALL-E_2022-04-25_12.28.11.jpg" loading="lazy" alt="a futuristic city desert oasis full of gardens, people, and neon jellyfish in the background, digital art - version 2">
 &lt;/td>
 &lt;/tr>
 &lt;/table>
 &lt;div class="dalle-prompt">
 &lt;i>"a futuristic city desert oasis full of gardens, people, and neon jellyfish in the background, digital art"&lt;/i>
 &lt;/div>
&lt;/div>
&lt;div class="img-block" style="margin-bottom:2rem;">
 &lt;img src="imgs_web/DALL-E_2022-05-08_11.51.51.jpg" loading="lazy" alt="a portrait of a squirrel with a hat and baseball bat oil painting">
 &lt;div class="dalle-prompt">
 &lt;i>"a portrait of a squirrel with a hat and baseball bat oil painting"&lt;/i>
 &lt;/div>
&lt;/div></description></item><item><title>Biking 118 non-intersecting miles in Brooklyn</title><link>/posts/2021-10-09/long-tiny-loop-attempt-2/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/2021-10-09/long-tiny-loop-attempt-2/</guid><description>&lt;h2>Introduction&lt;/h2>
&lt;p>Earlier this year, my goal was to get a &lt;a href="https://longtinyloop.com/">Long Tiny Loop&lt;/a> of score 30.0 or greater. I ended up falling short with a 29.75 which really annoyed me. Sooo, I set a new goal of scoring at least 40 by the end of the year. It took three attempts, I got a flat tire, and had to hop a barbed wire fence&amp;hellip; But I eventually got it.&lt;/p>
&lt;h2>Path Design&lt;/h2>
&lt;p>Based on the design process from my &lt;a href="/posts/2021-04-03/long-tiny-loop-attempt-1/">first Long Tiny Loop attempt&lt;/a>, I had a general idea of what I wanted to keep and what I wanted to improve for my second attempt. I knew that the &lt;a href="https://www.qgis.org/">QGIS&lt;/a> Python plugin I had written for my first Long Tiny Loop was great at helping me design paths that were nearly optimal, but I also knew that I wanted to do better than &amp;ldquo;nearly&amp;rdquo; optimal this time.&lt;/p></description></item><item><title>The Quantified Bike Explore</title><link>/posts/2021-06-17/the-quantified-bike-explore/</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><guid>/posts/2021-06-17/the-quantified-bike-explore/</guid><description>&lt;p>There are few things I find consistently more enjoyable than exploring my surroundings from the perspective of a bicycle. Whether it&amp;rsquo;s big cities or narrow country roads, there are details which can only be experienced from this perspective. Whenever I&amp;rsquo;m biking around and come across something I know most people don&amp;rsquo;t get to experience, I&amp;rsquo;m often reminded of the following:&lt;/p>
&lt;blockquote>The world reveals itself to those who travel on foot. &amp;mdash; Werner Herzog&lt;/blockquote>
&lt;p>Traversing the world by bike, silently under your own power, unencumbered by traffic, parking, or roads in general is a freedom second to none. Just yourself and your willingness to see what&amp;rsquo;s around the next corner. I&amp;rsquo;ve been living in Manhattan for roughly three years now and over that time period have encountered some pretty incredible sights.&lt;/p></description></item><item><title>Long Tiny Loop: Attempt #1</title><link>/posts/2021-04-03/long-tiny-loop-attempt-1/</link><pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate><guid>/posts/2021-04-03/long-tiny-loop-attempt-1/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I’m not exactly sure how I initially came across &lt;a target="_blank" rel="noopener noreferrer" href="https://longtinyloop.com/">LongTinyLoop.com&lt;/a>, but all I know is that it checks all the right boxes for me. It involves bikes, maps, algorithms, and it’s a competition! So what is Long Tiny Loop? It’s a challenge to travel the longest path, while both minimizing the overall footprint and not breaking the following rules (taken directly &lt;a target="_blank" rel="noopener noreferrer" href="https://longtinyloop.com/faq">from here&lt;/a>):&lt;/p>
&lt;ol>
&lt;li>Neglecting to follow established roads and trails (e.g. running around a large empty field)&lt;/li>
&lt;li>Returning to an intersection you’ve already passed through (even at an opposite corner)&lt;/li>
&lt;li>Running the same section of road twice (even on opposite sides)&lt;/li>
&lt;li>Excessive weaving (e.g. multiple unnecessary street crossings)&lt;/li>
&lt;li>Ending the loop more than 100 meters from where it began&lt;/li>
&lt;/ol>
&lt;p>Given this simple rule set, the results tend to yield some really interesting forms often resembling those derived from &lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Space-filling_curve">space-filling curves&lt;/a>.&lt;/p></description></item><item><title>Making STL frontal area calculations easier</title><link>/posts/2021-03-26/compute-stl-frontal-area/</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>/posts/2021-03-26/compute-stl-frontal-area/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When working with aerodynamic properties such as &lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Drag_coefficient">drag&lt;/a>, it&amp;rsquo;s common practice to normalize these values against some sort of reference area. For most ground vehicles with a pressure dominated drag contribution this ends up being the cross-sectional area as seen from the front (or projected onto the inlet plane). Most of the time, acquiring these values is pretty easy, especially if you&amp;rsquo;re dealing with some nice clean CAD files. Annoyingly though, sometimes all you have are the non-parametric, triangulated geometry (&lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/STL_(file_format)">STL&lt;/a>) files. When you find yourself in this situation, there are only a few options (Blender, ParaView, etc..) and they&amp;rsquo;re all fairly tedious, time consuming, and not as precise as it could be. This is an annoying bottleneck which is further exacerbated in fast paced work environments such as motorsport. Because of this, I wrote a simple CLI called &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/nathanrooy/p-area">pArea&lt;/a> which aims to reduce this process down to a single command.&lt;/p></description></item><item><title>Improved routing for OSMnx with Taxicab</title><link>/posts/2021-03-12/osmnx-openstreetmap-taxicab-routing/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>/posts/2021-03-12/osmnx-openstreetmap-taxicab-routing/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>If you’ve ever worked on the geospatial side of data science or just have a passion for maps and code, you’ve probably used &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/gboeing/osmnx">OSMnx&lt;/a>. It’s a solid Python package that fills the void between &lt;a target="_blank" rel="noopener noreferrer" href="https://www.openstreetmap.org/">OpenStreetMap&lt;/a> and &lt;a target="_blank" rel="noopener noreferrer" href="https://github.com/networkx/networkx">NetworkX&lt;/a>. I’ve used it for both work and personal projects, and I really like it a lot. The one thing though that I’ve always found lacking however is the routing functionality&amp;hellip; Let&amp;rsquo;s work through a simple example that demonstrates what I mean. When routing between two longitude/latitude pairs, one first needs to find the nearest network nodes like so:&lt;/p></description></item><item><title>Biking from Cleveland to Cincinnati</title><link>/posts/2020-09-17/bikepacking-cleveland-to-cincinnati/</link><pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate><guid>/posts/2020-09-17/bikepacking-cleveland-to-cincinnati/</guid><description>&lt;p>The idea of biking from Cleveland to Cincinnati has been floating around in my adventure backlog for at least ten years now. It&amp;rsquo;s a three and a half hour drive that I made many times throughout college and as you&amp;rsquo;d expect, it&amp;rsquo;s pretty boring. The bike ride on the other hand was four days of beautiful scenery, small towns, and good food.&lt;/p>
&lt;div class="img-block" style="margin-top:3rem;">
 &lt;picture>
 &lt;source type="image/webp" srcset="imgs-web/DSCF1501_660x_web.webp" />
 &lt;img
 src="imgs-web/DSCF1501_660x_web.jpg"
 loading="eager"
 alt="We started our trip from edgewater park in cleveland" />
 &lt;/picture>
 &lt;p>&lt;b>DAY 1:&lt;/b> We started off Saturday morning from my brother's place in Tremont by first biking in the opposite direction for the first few miles. I insisted that we should begin our adventure with some sort of "official" starting point and Edgewater Park seemed like a good spot.&lt;/p></description></item><item><title>Effective Simulated Annealing with Python</title><link>/posts/2020-05-14/simulated-annealing-with-python/</link><pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate><guid>/posts/2020-05-14/simulated-annealing-with-python/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I use some form of optimization on a daily basis, whether it&amp;rsquo;s for work or personal projects. Something else I do on a daily basis is avoid &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Simulated_annealing">simulated annealing&lt;/a>. I&amp;rsquo;ve always associated simulated annealing with inefficiency. Yes, it&amp;rsquo;s a global optimizer, but at what cost? In most situations I&amp;rsquo;ve been able to achieve optimal or near-optimal results in a substantially quicker time using various other methods (&lt;a terget="_blank" href="https://nathanrooy.github.io/posts/2016-08-17/simple-particle-swarm-optimization-with-python/">particle swarm&lt;/a>, &lt;a target="_blank" href="https://nathanrooy.github.io/posts/2017-08-27/simple-differential-evolution-with-python/">genetic/evolutionary&lt;/a>, etc&amp;hellip;). So what&amp;rsquo;s the deal?&lt;/p></description></item><item><title>Visualizing One Hundred Years of Cincinnati Maps</title><link>/posts/2019-11-27/georeferencing-historical-maps-of-cincinnati/</link><pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate><guid>/posts/2019-11-27/georeferencing-historical-maps-of-cincinnati/</guid><description>&lt;h2>Introduction&lt;/h2>
&lt;link href="jquery-ui.min.css" rel='stylesheet'/>
&lt;script src="jquery.min.js">&lt;/script>
&lt;script src="jquery-ui.min.js">&lt;/script>
&lt;script src="jquery.ui.touch-punch.min.js">&lt;/script>
&lt;script src="leaflet_v1.3.1.js">&lt;/script>
&lt;link href="leaflet_v1.3.1.css" rel="stylesheet"/>
&lt;script src='/js/leaflet-side-by-side/2.2.0/leaflet-side-by-side.min.js'>&lt;/script>
&lt;link href='/js/leaflet-fullscreen/1.0.2/leaflet.fullscreen.css' rel='stylesheet'>
&lt;script src='/js/leaflet-fullscreen/1.0.2/Leaflet.fullscreen.min.js'>&lt;/script>
&lt;script src='/js/leaflet-hash/leaflet-hash.js'>&lt;/script>
&lt;script src="post.js">&lt;/script>
&lt;p>A while back, someone posted on the Cincinanti subreddit an interesting mapping artifact. I didn&amp;rsquo;t know the answer to the question, but it got me thinking about what else has changed over time in Cincinnati in regards to maps and names? Luckly the &lt;a target="_blank" href="https://digital.cincinnatilibrary.org/">Cincinnati Public Library Digital Archives&lt;/a> has a wealth of information on just this topic.&lt;/p>
&lt;p style="background-color: var(--background-light); padding-top:2rem; padding-bottom:2rem;">
 &lt;img style="height:500px; margin-top:0rem; margin-bottom:0rem;" src="Screenshot_20180831-123158.png" alt="cincinnati reddit mapping mystery" />
&lt;/p>
&lt;p>I ended up downloading about a dozen maps ranging from as early as 1815 to as recent as 1900. I then &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Georeferencing">georeferenced&lt;/a> these maps against a single modern map using known commonalites such as prominant intersections and landmarks. This standardization process, although a bit tedious, results in a final product which allows for a true apples to apples comparison. At this point, the maps can be stacked on top of each other and visualized. Below is the end result of this (make sure to go fullscreen!). For more on the technical details, see the &lt;a href="#methodology">methodology section&lt;/a> below.&lt;/p></description></item><item><title>The Visual Similarity of Movie Posters</title><link>/posts/2019-03-24/movie-poster-tsne/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/2019-03-24/movie-poster-tsne/</guid><description>&lt;p>Recently this past winter my friends and I were trying to find something to watch on one of the major video streaming services and as as usual, we were drowning in decision paralysis. Page after page, and still nothing. After a certain point, all the movie covers began to blend together at which point we gave up. This got me thinking on the visual similarity of movie posters and the seemingly unoriginal designs most of them have&amp;hellip;&lt;/p></description></item><item><title>BlenderFOAM: Open-source Fluid Based Shape Optimization</title><link>/posts/2019-03-05/blenderfoam-aerodynamic-shape-optimization/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/2019-03-05/blenderfoam-aerodynamic-shape-optimization/</guid><description>&lt;h2>Introduction&lt;/h2>
&lt;p>I was recently cleaning out my closet and came across an old hard drive labeled &amp;ldquo;grad school&amp;rdquo;. After plugging it in and exploring it for a few minutes, I came across all my old thesis stuff. Seeing how this was before I started using GitHub, I figured I would post it in hopes that someone else could get some use from it. Even though it uses older versions of both Blender and OpenFOAM, the results should still be perfectly acceptable given that the equations of fluid dynamics haven&amp;rsquo;t changed much in the last hundred years.&lt;/p></description></item><item><title>A Low Cost Approach to Improving Pedestrian Safety with Deep Learning</title><link>/posts/2019-02-06/raspberry-pi-deep-learning-traffic-tracker/</link><pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate><guid>/posts/2019-02-06/raspberry-pi-deep-learning-traffic-tracker/</guid><description>&lt;p class="post-update">
&lt;b>POST UPDATE&lt;/b>: Since posting this, I've received a considerable amount of interest from individuals and local city governments from across the U.S. looking to get a better grasp on pedestrian data. Because of this, I spent some time building out a better algorithm and packaging it for easy use. I'm terrible with names, so for now it's simply "urban mobility tracker". If you can think of a better name, please let me know! Additionally, to generate detections for the urban-mobility-tracker, I performed a full model retraining of MobileNetV1 SSD using data I collected and annotated. I'm calling this new pedestrian/vehicle/bicyclist optimized object detector "PedNet". As time goes on and more people use these two tools, I'm hoping that people will contribute more training data (especially in adverse lighting and weather conditions) so that PedNet can be retrained and improved. Lastly, this new version continues to use TensorFlow but with the addition of the &lt;a target="_blank" href="https://coral.ai/products/accelerator/">Coral USB accelerator&lt;/a> which leverages Google's TPU technology so now it achieves an update frequency of ~10Hz!!! (old version was ~2Hz)
&lt;br>&lt;br>GitHub links:
&lt;br> • Urban-Mobility-Tracker [&lt;a target="_blank" href="https://github.com/nathanrooy/rpi-urban-mobility-tracker">here&lt;/a>]
&lt;br> • PedNet [&lt;a target="_blank" href="https://github.com/nathanrooy/ped-net">here&lt;/a>]
&lt;/p></description></item><item><title>Finding the least efficient walking routes in Cincinnati</title><link>/posts/2018-09-05/cincinnati-route-efficiency/</link><pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate><guid>/posts/2018-09-05/cincinnati-route-efficiency/</guid><description>&lt;p>A while back when I was working on my &amp;ldquo;&lt;a href="/posts/2017-02-15/the-age-of-cincinnati/">age of cincinnati&lt;/a>&amp;rdquo; map, one of the first things I noticed was how quickly we&amp;rsquo;ve changed the layout of our built environment. Nowhere are these non-traditional building patterns more apparent than the piecemeal development of suburbia.&lt;/p>
&lt;figure style="margin-top:2rem; margin-bottom:2rem;">
 &lt;img src="age_of_cincy_crop_1000x750.jpg" alt="age of cincinnati map crop">
&lt;/figure>
&lt;p>Given the enormous subsidies that are required to create and maintain these suburban developments, it&amp;rsquo;s expected that their appearance would deviate from what a free market would provide. When unconstrained by market forces, distorations begin to appear and can take shape in many different ways.&lt;/p></description></item><item><title>Word2vec from Scratch with Python and NumPy</title><link>/posts/2018-03-22/word2vec-from-scratch-with-python-and-numpy/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>/posts/2018-03-22/word2vec-from-scratch-with-python-and-numpy/</guid><description>&lt;h2>Introduction&lt;/h2>
&lt;p>Since joining a tech startup back in 2016, my life has revolved around machine learning and natural language processing (NLP). Trying to extract faint signals from terabytes of streaming social media is the name of the game. Because of this, I&amp;rsquo;m constantly experimenting and implementing different NLP schemes; word2vec being among the simplest and coincidently yielding great predictive value. The underpinnings of word2vec are exceptionally simple and the math is borderline elegant. The whole system is deceptively simple, and provides exceptional results. This tutorial aims to teach the basics of word2vec while building a barebones implementation in &lt;a target="_blank" rel="noopener noreferrer" href="https://www.python.org/">Python&lt;/a> using &lt;a target="_blank" rel="noopener noreferrer" href="http://www.numpy.org/">NumPy&lt;/a>. Note that the final Python implementation will not be optimized for speed or memory usage, but instead for easy understanding.&lt;/p></description></item><item><title>Mapping the Chili Regions of Cincinnati [two year update]</title><link>/posts/2018-02-01/chili-regions-of-cincinnati-updated/</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><guid>/posts/2018-02-01/chili-regions-of-cincinnati-updated/</guid><description>&lt;p>Roughly two yeas ago I wrote my &lt;a target="_blank" rel="noopener noreferrer" href="https://nathanrooy.github.io/posts/2016-02-03/chili-regions-of-cincinnati/">first post&lt;/a> on here, in which I created a &lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Voronoi_diagram">voronoi diagram&lt;/a> depicting the chili regions of Cincinnati. Each region corresponded to being closer to either &lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Skyline_Chili">Skyline Chili&lt;/a> or &lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Gold_Star_Chili">Gold Star Chili&lt;/a>. Since a voronoi tessellation is based off &lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Euclidean_distance">Euclidean distance&lt;/a> (&amp;ldquo;as the crow flies&amp;rdquo;), its usefulness diminishes considerably when applied to street networks. Because we&amp;rsquo;re not yet traveling around using jetpacks, I modified the distance function to use something called &lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Shortest_path_problem">network distance&lt;/a> which is calculated using &lt;a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra&amp;rsquo;s algorithm&lt;/a>. As the name implies, it&amp;rsquo;s the length as traveled through a network, in this case, the roads and sidewalks from the &lt;a target="_blank" rel="noopener noreferrer" href="https://www.openstreetmap.org">OpenStreetMaps&lt;/a> database. All calculations were completed using a &lt;a target="_blank" rel="noopener noreferrer" href="https://www.python.org/">Python&lt;/a> script I wrote. Additionally, since its been two years and some locations have come and gone, I scraped the locations of Skyline and Gold Star from Google Maps and updated accordingly. Once all the data was ready, it was combined with geometry downloaded from the Cincinnati Area GIS (&lt;a target="_blank" rel="noopener noreferrer" href="http://cagismaps.hamilton-co.org/cagisportal/">CAGIS&lt;/a>) web site, assembled in &lt;a target="_blank" rel="noopener noreferrer" href="https://qgis.org">QGIS&lt;/a>, and finished off in Adobe Illustrator.&lt;/p></description></item><item><title>Visualizing one full year of bike commuting in Cincinnati</title><link>/posts/2018-01-11/one-year-of-bike-commuting/</link><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><guid>/posts/2018-01-11/one-year-of-bike-commuting/</guid><description>&lt;p>2017 was an interesting year in terms of my daily commute. Although I unfortunately own a car, I refuse to waste my life mired in a quagmire of traffic like some kind of suburban commuter. This means I&amp;rsquo;m biking everywhere, or taking transit. But not like one of those weird weekend warriors dressed head to toe in fluorescent lycra, more like hoodie and sweat pants. What made 2017 interesting was the fact that not only did I move around several times, but being apart of a rapidly growing tech startup, so did my office.&lt;/p></description></item><item><title>Evolving Simple Organisms using a Genetic Algorithm and Deep Learning from Scratch with Python</title><link>/posts/2017-11-30/evolving-simple-organisms-using-a-genetic-algorithm-and-deep-learning/</link><pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate><guid>/posts/2017-11-30/evolving-simple-organisms-using-a-genetic-algorithm-and-deep-learning/</guid><description>&lt;h2>Introduction&lt;/h2>
&lt;p>A few weeks ago I got pretty deep into a late night &lt;a target="_blank" href="http://youtube-rabbit-hole.urbanup.com/9025238">YouTube rabbit hole&lt;/a>, and somewhere around &lt;a target="_blank" href="https://youtu.be/HgWQ-gPIvt4">evolving soft body robots&lt;/a>, I came across this video (&lt;a target="_blank" href="https://youtu.be/TC5jzw05mNo">here&lt;/a>). I&amp;rsquo;m not sure what if it was the peaceful background music or the hypnotizing motion of the dragonflies but I wanted to try and run the simulation on my local computer. After failing to find a GitHub repo for this, I decided to spend a few hours coding my own version in Python. I was pretty happy with the end results so I decided to turn it into a tutorial.&lt;/p></description></item><item><title>Do We Actually Need to Replace the Western Hills Viaduct?</title><link>/posts/2017-11-29/western-hills-viaduct-spatial-analysis/</link><pubDate>Wed, 29 Nov 2017 00:00:00 +0000</pubDate><guid>/posts/2017-11-29/western-hills-viaduct-spatial-analysis/</guid><description>&lt;h2>Introduction and Background&lt;/h2>
&lt;p>If you live in the Cincinnati area, by now you should have heard that the Western Hills Viaduct is in a fairly dire situation at the moment and calls for a replacement have reached an almost fevered pitch. While all this &lt;a target="_blank" href="http://www.wcpo.com/news/local-news/hamilton-county/cincinnati/time-running-out-to-find-western-hills-viaduct-replacement-funding">squealing&lt;/a> for a replacement has been going on, I couldn&amp;rsquo;t help but wonder if a replacement was actually what Cincinnati needs? As it currently stands, it requires $1 million per year just to maintain and a replacement is expected to cost $335 million.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> This is an absurd amount of our money to be spending on another road project. This got me thinking, does the current viaduct generate at least $1 million a year in revenue for the city to justify its ongoing maintenance? Would a replacement viaduct generate $335 million in revenue for the city to justify its cost? Who would be impacted if we simply got rid of the viaduct and invested the money elsewhere? While I can&amp;rsquo;t answer all these questions, I can focus on the last one. But first, a little refresher.&lt;/p></description></item><item><title>Differential Evolution Optimization from Scratch with Python</title><link>/posts/2017-08-27/simple-differential-evolution-with-python/</link><pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate><guid>/posts/2017-08-27/simple-differential-evolution-with-python/</guid><description>&lt;p>Besides &lt;a target="blank" href="https://en.wikipedia.org/wiki/Particle_swarm_optimization">particle swarm optimization&lt;/a> (PSO) which I touched on &lt;a target="_blank" href="https://nathanrooy.github.io/posts/2016-08-17/simple-particle-swarm-optimization-with-python/">previously&lt;/a>, &lt;a target="blank" href="https://en.wikipedia.org/wiki/Differential_evolution">differential evolution&lt;/a> (DE) is one of my go-to favorites. Just like PSO, differential evolution falls within the &lt;a target="blank" href="https://en.wikipedia.org/wiki/Evolutionary_algorithm">evolutionary algorithms&lt;/a> (EA) family. Differential evolution is very similar to &lt;a target="blank">genetic algorithms&lt;/a> (GA) which are based on the principles of evolutionary biology such as mutation, crossover, and selection. The downside of genetic algorithms is that at their core, they are based on a bit level information structure. Because of this, GAs excel at combinatorial optimization problems such as the &lt;a target="blank" href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">traveling salesman problem&lt;/a>. The downside is that GAs don&amp;rsquo;t natively support real valued (float values) cost functions. Sure, genetic algorithms can be modified to support float values, but in my experience it just isn&amp;rsquo;t worth it. This is where differential evolution comes it. Differential evolution is basically a genetic algorithm that natively supports float value based cost functions. In this tutorial, I hope to teach you the fundamentals of differential evolution and implement a bare bones version in &lt;a target="_blank" href="https://www.python.org/">Python&lt;/a>.&lt;/p></description></item><item><title>Mapping the Age of Cincinnati</title><link>/posts/2017-02-15/the-age-of-cincinnati/</link><pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate><guid>/posts/2017-02-15/the-age-of-cincinnati/</guid><description>&lt;p>I&amp;rsquo;ve always been really impressed by those &amp;ldquo;age of&amp;hellip;&amp;rdquo; maps that I see from time to time on the internet (see &lt;a target="_blank" href="http://code.waag.org/buildings/">here&lt;/a>, &lt;a target="_blank" href="http://labratrevenge.com/pdx/">here&lt;/a>, and &lt;a target="_blank" href="http://cityhubla.github.io/LA_Building_Age/">here&lt;/a>) so I thought I would give it a go this winter while I had a little free time. Between web scraping and actual map creation it ended up taking a little over a month to finish.&lt;/p>
&lt;p>Click (&lt;a target="_blank" href="full-screen.html">here&lt;/a>) to launch a full screen version of the map in a new window.&lt;/p></description></item><item><title>Biking from Cleveland to Montréal</title><link>/posts/2016-12-22/bikepacking-cleveland-to-montreal/</link><pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate><guid>/posts/2016-12-22/bikepacking-cleveland-to-montreal/</guid><description>&lt;style>
 @media only screen and (min-width: 850px) {
 .markdown table {
 width: 90vw;
 max-height: 620px;
 margin-left: 50%;
 transform: translateX(-50%);
 }

 .two-img {
 max-width: 1240px;
 }

 .img-block {
 margin-bottom: 4rem;
 margin-top: 4rem;
 }
 }

 table td img {
 padding-top: 0;
 padding-bottom: 0;
 margin-bottom: 0;
 margin-top: 0;
 }

 .left {
 padding-right: 0.25rem;
 }

 .right {
 padding-left: 0.25rem;

 }
 
 .top_row {
 padding-bottom: 0.5rem;
 }
&lt;/style>
&lt;p>Earlier this summer after quitting my job I had a two week window before a mandatory bachelor party in Vegas which I was determined to fill with something good. Thinking of all the places I could visit within just two weeks, Montréal seemed like the best option. But since Montréal is only a single days car ride, I thought I could make it interesting by biking there. Seems doable right? Two weeks, 700ish miles? Plus somehow getting back? Challenge accepted!&lt;/p></description></item><item><title>Calculate the Distance Between Two GPS Points with Python (Vincenty’s Inverse Formula)</title><link>/posts/2016-12-18/vincenty-formula-with-python/</link><pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate><guid>/posts/2016-12-18/vincenty-formula-with-python/</guid><description>&lt;p>Recently the work I have been doing requires a higher degree of accuracy than which the &lt;a target="_blank" href="http://localhost:4000/posts/2016-09-07/haversine-with-python/">haversine method&lt;/a> I was using could provide. This prompted me to implement a Python version of the &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Vincenty's_formulae">Vincenty&amp;rsquo;s inverse formula&lt;/a>. Unlike the &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Haversine_formula">Haversine&lt;/a> method (which I posted about previously) of directly calculating the &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Great-circle_distance">great-circle distance&lt;/a> between two points on a perfectly spherical Earth, Vincenty&amp;rsquo;s formulae is an iterative method which more realistically assumes Earth as an &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Spheroid">oblate spheroid&lt;/a>.&lt;/p>
&lt;p>Before proceeding further, several values need to be defined:&lt;/p></description></item><item><title>Mapping out the Southern Cultural Divide in America</title><link>/posts/2016-12-14/southern-cultural-divide/</link><pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate><guid>/posts/2016-12-14/southern-cultural-divide/</guid><description>&lt;p>I just finished the book &lt;i>&lt;a target="_blank" href="https://www.goodreads.com/book/show/84294.American_Theocracy">American Theocracy&lt;/a>&lt;/i> by &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Kevin_Phillips_(political_commentator)">Kevin Phillips&lt;/a> (which is a seriously good book!) but in one of the chapters they included a map showing the regions of the United States which identify as “Southern” versus “American”. The map was originally created by J.S. Reed in 1975. They achieved this by looking through the yellow pages and counting the businesses that included &amp;ldquo;Southern&amp;rdquo; and &amp;ldquo;American&amp;rdquo;. From this data, they were able to create the contour map seen below (&lt;a target="_blank" href="https://books.google.com/books?id=0pU9z669ZwEC&amp;lpg=PT148&amp;ots=AlyfTchym6&amp;d&amp;pg=PT148#v=onepage&amp;q&amp;f=false">Google Books version here&lt;/a>).&lt;/p></description></item><item><title>Creating parameterized 2D airfoils with quadratic Bézier curves and Python</title><link>/posts/2016-09-14/airfoil-manipulation-via-bezier-curves-with-python/</link><pubDate>Wed, 14 Sep 2016 00:00:00 +0000</pubDate><guid>/posts/2016-09-14/airfoil-manipulation-via-bezier-curves-with-python/</guid><description>&lt;p>Before any type of shape optimization can occur, the geometry needs to be &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Parametrization">parameterized&lt;/a> (usually…). One of the easiest ways to accomplish this is through the use of &lt;a target="_blank" href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">Bézier&lt;/a> curves. For this tutorial, we’re not going to manipulate an existing geometry, rather we’re going to generate the geometry from scratch using a series of connected Bézier curves called a &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Composite_B%C3%A9zier_curve">composite Bézier curve&lt;/a>.&lt;/p>
&lt;p>A quadratic Bézier curve is defined using three control points. The first and third point are what’s called anchor points, while the middle point controls the shape of the curve. For 0 ≤ t ≤ 1, a quadratic Bézier curve is defined as:&lt;/p></description></item><item><title>Calculating the Distance Between Two GPS Coordinates with Python (Haversine Formula)</title><link>/posts/2016-09-07/haversine-with-python/</link><pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate><guid>/posts/2016-09-07/haversine-with-python/</guid><description>&lt;p>A lot of my posts recently have focused on the analysis of spatial data coming from either the GPS on my phone (collected through Strava) or geo-tagged tweets. Because of this I ended up writing my own Python module for calculating the distance between two latitude/longitude pairs. This is accomplished using the &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Haversine_formula">Haversine formula&lt;/a>. While more accurate methods exist, the Haversine formula and Python implementation couldn&amp;rsquo;t be any simpler. Below is a breakdown of the Haversine formula.&lt;/p></description></item><item><title>Montréal’s Language Distribution According to Twitter…</title><link>/posts/2016-09-01/language-of-montreal-according-to-twitter/</link><pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate><guid>/posts/2016-09-01/language-of-montreal-according-to-twitter/</guid><description>&lt;p>Over the span of roughly eight months I was able to collect 1,116,442 tweets using the &lt;a target="_blank" href="http://www.tweepy.org/">Tweepy&lt;/a> Python library which facilitates easy access to the free Twitter API. If eight months sounds like a long time for only a ~1M tweets, that’s because the free Twitter API only gives access to roughly 1% of the total Twitter stream or “firehose”. Since saving the actual tweet goes against the user agreement, I only saved a lat/lon location and a language type within a single SQL database. From all these tweets, only 131,773 (11.8%) were geotagged. Of all the geotagged tweets, 79,565 (60.38%) were in English, 39,508 (29.98%) in French and 12,700 (9.64%) were some other language. Within this “other” language, Spanish represented the largest portion at 2.14% of the geotagged tweets. Using just the English and French geotagged tweets resulted in the map containing 119,073 unique tweet locations of which 33% were French and 66% were English. The map was created using QGIS and Bing Maps satellite imagery.&lt;/p></description></item><item><title>Cincy to Dayton and Back by Bike / My First Century!</title><link>/posts/2016-08-31/cincy-to-dayton-bike-ride/</link><pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate><guid>/posts/2016-08-31/cincy-to-dayton-bike-ride/</guid><description>&lt;p>Since I had some time off recently, I decided to finally try and bike to Dayton and back in one day. I bike everyday to and from work, so the idea of biking long distances simply to log miles isn’t that appealing to me. I’m not some suburban spandex wearing weekend warrior with a bike rack on my car. Still, the challenge has taunted me for a while and it sounded fun. So, at the precise time of 10:47am wearing a hoodie and shorts I packed a gallon jug of water in my backpack and set off. After circling Fountain Square, I rode on Central Park Way up to Northside and took Hamilton Ave out to the sticks…&lt;/p></description></item><item><title>Particle Swarm Optimization from Scratch with Python</title><link>/posts/2016-08-17/simple-particle-swarm-optimization-with-python/</link><pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate><guid>/posts/2016-08-17/simple-particle-swarm-optimization-with-python/</guid><description>&lt;p>Particle swarm optimization (&lt;a target="_blank" href="https://en.wikipedia.org/wiki/Particle_swarm_optimization">PSO&lt;/a>) is one of those rare tools that&amp;rsquo;s comically simple to code and implement while producing bizarrely good results. Developed in 1995 by Eberhart and Kennedy, PSO is a biologically inspired optimization routine designed to mimic birds flocking or fish schooling. I&amp;rsquo;ll occasionally use PSO for &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Computational_fluid_dynamics">CFD&lt;/a> based aerodynamic shape optimization, but more often than not, it&amp;rsquo;s for a machine learning project. PSO is not guaranteed to find the global minimum, but it does a solid job in challenging, high dimensional, non-convex, non-continuous environments. In this short introductory tutorial, I&amp;rsquo;ll demonstrate PSO in its absolute simplest form. At a later date, I&amp;rsquo;ll create another PSO tutorial featuring a more advanced implementation.&lt;/p></description></item><item><title>Mapping the White Castle/Krystal Divide</title><link>/posts/2016-08-01/white-castle-krystal-divide/</link><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid>/posts/2016-08-01/white-castle-krystal-divide/</guid><description>&lt;p>Ahh White Castle. I’ve had a love/hate relationship with this place since college. Sometimes after a solid night of pillaging and conquering, nothing satisfies your hunger like those little square, steamed devil burgers. Give me a ten sack and life is good. Add in some tots and a side of ranch? Game over. Good night. As for Krystal, I had it once on the way to Panama for Spring Break. It was alright… And that’s the end of that story. Anyway, I always had this vague idea that White Castle was only in the north and Krystal were in the south so I decided to map it out.&lt;/p></description></item><item><title>FiveThirtyEight: The Riddler (2016-July-08)</title><link>/posts/2016-07-08/the-riddler/</link><pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/2016-07-08/the-riddler/</guid><description>&lt;p>I hate puzzles, but for some reason I find the Riddler from FiveThirtyEight more addicting than Flavor Blasted Goldfish. Anyway, I decided to post my solution for this week. Below is the question:&lt;/p>
&lt;blockquote>
 The archvillain Laser Larry threatens to imminently zap Riddler Headquarters (which, seen from above, is shaped like a regular pentagon with no courtyard or other funny business). He plans to do it with a high-powered, vertical planar ray that will slice the building exactly in half by area, as seen from above. The building is quickly evacuated, but not before in-house mathematicians move the most sensitive riddling equipment out of the places in the building that have an extra high risk of getting zapped.
 &lt;br>
 &lt;br>
 &lt;i>Where are those places&lt;/i>, and how much riskier are they than the safest spots? (It’s fine to describe those places qualitatively.)
&lt;/blockquote>
&lt;p>Doesn’t seem too difficult right? Well first things first, lets create a pentagon about the origin [0,0] and calculate its area.&lt;/p></description></item><item><title>Mapping out IHOP vs. Waffle House</title><link>/posts/2016-03-23/ihop-vs-waffle-house/</link><pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate><guid>/posts/2016-03-23/ihop-vs-waffle-house/</guid><description>&lt;p>So I had never actually been to a Waffle House until they put the one in across from Stab and Grab in Clifton. I have to say though, I’m questioning my loyalty to Toppers as my post-rage food source. The second time I went there it was all still so new to me that I splurged a bit and ordered “the left side of the menu”. It was the best meal of my life…&lt;/p></description></item><item><title>Dog Ownership in Cincinnati [map]</title><link>/posts/2016-03-12/dog-ownership-in-cincinnati/</link><pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate><guid>/posts/2016-03-12/dog-ownership-in-cincinnati/</guid><description>&lt;p>In Cincinnati, there&amp;rsquo;s a pomeranian named Michelle Obama. There’s also a Beagle named Sarah Palin, a German Shepherd named Obwan Kenobi, and a Pit Bull Terrier named Beyoncé. Actually there’s a total of six dogs named Beyoncé in Cincinnati. Bart Simpson? Check. How about Bruno Mars? Several. Willie Nelson, Willy Wonka, and Winston Churchill? Yes, yes, and yes. How about a Chihuahua named Taco Bell? Yes, face palm… Applesauce, Sriracha, Tabasco, Trumpet, Trombone, Toto, Tripod, Shampoo, and Tony Montana? Yes to all of those! Okay, what about Zombie Wolf? You bet! The creativity of Cincinnati’s dog naming is staggering.&lt;/p></description></item><item><title>Mapping the Chili Regions of Cincinnati</title><link>/posts/2016-02-03/chili-regions-of-cincinnati/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>/posts/2016-02-03/chili-regions-of-cincinnati/</guid><description>&lt;p>First post on my first blog ever! I created a &lt;a target="_blank" href="https://en.wikipedia.org/wiki/Voronoi_diagram">voronoi&lt;/a> diagram based off the locations of the two major chili chains in Cincinnati; Skyline and Gold Star. In simplest terms, the color correlates to which chili chain you’re closest to based off linear distance (not network distance). So whether your allegiance is with Skyline or Gold Star, the territories have been established!&lt;/p>
&lt;p>&lt;img src="01.png" alt="Chili regions of cincinnati">&lt;/p>
&lt;p>&lt;em>Notes:&lt;/em>&lt;/p>
&lt;p>&lt;em>The restaurant latitude/longitude positions were scraped off Google Maps and imported into QGIS via a CSV layer. The base map was downloaded from OpenStreetMaps and trimmed using the “Metropolitan and Micropolitan Statistical Areas and Related Statistical Areas” shapefile available from the &lt;a target="_blank" href="https://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html">U.S. Census.&lt;/a>&lt;/em>&lt;/p></description></item></channel></rss>