<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://nathanrooy.github.io/?utm_medium=rss</link><description>Recent content from</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://nathanrooy.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>3D printing a full-size kayak</title><link>https://nathanrooy.github.io/posts/2023-03-12/3d-printed-kayak/?utm_medium=rss</link><pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2023-03-12/3d-printed-kayak/?utm_medium=rss</guid><description>I 3D printed a full-size kayak in my Manhattan apartment.</description></item><item><title>Turboshtein</title><link>https://nathanrooy.github.io/posts/2022-11-03/turboshtein/?utm_medium=rss</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2022-11-03/turboshtein/?utm_medium=rss</guid><description>Turboshtein: Possibly the fastest way of computing Levenshtein distance with Python</description></item><item><title>Playing around with Dall·E 2</title><link>https://nathanrooy.github.io/posts/2022-05-08/dall-e-2/?utm_medium=rss</link><pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2022-05-08/dall-e-2/?utm_medium=rss</guid><description>Playing around with OpenAI's Dall·E 2</description></item><item><title>Long Tiny Loop: Attempt #2</title><link>https://nathanrooy.github.io/posts/2021-10-09/long-tiny-loop-attempt-2/?utm_medium=rss</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2021-10-09/long-tiny-loop-attempt-2/?utm_medium=rss</guid><description>Brooklyn New York, evolutionary path optimization, and my second Long Tiny Loop attempt!</description></item><item><title>The Quantified Bike Explore</title><link>https://nathanrooy.github.io/posts/2021-06-17/the-quantified-bike-explore/?utm_medium=rss</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2021-06-17/the-quantified-bike-explore/?utm_medium=rss</guid><description>Exploring New York City via GitHub Actions, OpenStreetMap, and Strava.</description></item><item><title>Long Tiny Loop: Attempt #1</title><link>https://nathanrooy.github.io/posts/2021-04-03/long-tiny-loop-attempt-1/?utm_medium=rss</link><pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2021-04-03/long-tiny-loop-attempt-1/?utm_medium=rss</guid><description>My first attempt at Long Tiny Loop</description></item><item><title>Making STL frontal area calculations easier</title><link>https://nathanrooy.github.io/posts/2021-03-26/compute-stl-frontal-area/?utm_medium=rss</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2021-03-26/compute-stl-frontal-area/?utm_medium=rss</guid><description>Quickly and easily calculate the frontal or projected area of an STL file</description></item><item><title>Improved routing for OSMnx with Taxicab</title><link>https://nathanrooy.github.io/posts/2021-03-12/osmnx-openstreetmap-taxicab-routing/?utm_medium=rss</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2021-03-12/osmnx-openstreetmap-taxicab-routing/?utm_medium=rss</guid><description>Improved routing for OpenStreetMap and OSMnx with Taxicab</description></item><item><title>Biking from Cleveland to Cincinnati</title><link>https://nathanrooy.github.io/posts/2020-09-17/bikepacking-cleveland-to-cincinnati/?utm_medium=rss</link><pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2020-09-17/bikepacking-cleveland-to-cincinnati/?utm_medium=rss</guid><description>Biking three hundred miles from Cleveland to Cincinnati</description></item><item><title>Effective Simulated Annealing with Python</title><link>https://nathanrooy.github.io/posts/2020-05-14/simulated-annealing-with-python/?utm_medium=rss</link><pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2020-05-14/simulated-annealing-with-python/?utm_medium=rss</guid><description>Effective Simulated Annealing with Python</description></item><item><title>Visualizing One Hundred Years of Cincinnati Maps</title><link>https://nathanrooy.github.io/posts/2019-11-27/georeferencing-historical-maps-of-cincinnati/?utm_medium=rss</link><pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2019-11-27/georeferencing-historical-maps-of-cincinnati/?utm_medium=rss</guid><description>Introduction A while back, someone posted on the Cincinanti subreddit an interesting mapping artifact. I didn&amp;rsquo;t know the answer to the question, but it got me thinking about what else has changed over time in Cincinnati in regards to maps and names? Luckly the Cincinnati Public Library Digital Archives has a wealth of information on just this topic.
I ended up downloading about a dozen maps ranging from as early as 1815 to as recent as 1900.</description></item><item><title>The Visual Similarity of Movie Posters</title><link>https://nathanrooy.github.io/posts/2019-03-24/movie-poster-tsne/?utm_medium=rss</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2019-03-24/movie-poster-tsne/?utm_medium=rss</guid><description>Analyzing the visual similarity of 100k movie posters with deep learning and t-sne</description></item><item><title>BlenderFOAM: Open-source Fluid Based Shape Optimization</title><link>https://nathanrooy.github.io/posts/2019-03-05/blenderfoam-aerodynamic-shape-optimization/?utm_medium=rss</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2019-03-05/blenderfoam-aerodynamic-shape-optimization/?utm_medium=rss</guid><description>Introduction I was recently cleaning out my closet and came across an old hard drive labeled &amp;ldquo;grad school&amp;rdquo;. After plugging it in and exploring it for a few minutes, I came across all my old thesis stuff. Seeing how this was before I started using GitHub, I figured I would post it in hopes that someone else could get some use from it. Even though it uses older versions of both Blender and OpenFOAM, the results should still be perfectly acceptable given that the equations of fluid dynamics haven&amp;rsquo;t changed much in the last hundred years.</description></item><item><title>A Low Cost Approach to Improving Pedestrian Safety with Deep Learning</title><link>https://nathanrooy.github.io/posts/2019-02-06/raspberry-pi-deep-learning-traffic-tracker/?utm_medium=rss</link><pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2019-02-06/raspberry-pi-deep-learning-traffic-tracker/?utm_medium=rss</guid><description>POST UPDATE: Since posting this, I've received a considerable amount of interest from individuals and local city governments from across the U.S. looking to get a better grasp on pedestrian data. Because of this, I spent some time building out a better algorithm and packaging it for easy use. I'm terrible with names, so for now it's simply "urban mobility tracker". If you can think of a better name, please let me know!</description></item><item><title>Word2vec from Scratch with Python and NumPy</title><link>https://nathanrooy.github.io/posts/2018-03-22/word2vec-from-scratch-with-python-and-numpy/?utm_medium=rss</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2018-03-22/word2vec-from-scratch-with-python-and-numpy/?utm_medium=rss</guid><description>Introduction Since joining a tech startup back in 2016, my life has revolved around machine learning and natural language processing (NLP). Trying to extract faint signals from terabytes of streaming social media is the name of the game. Because of this, I&amp;rsquo;m constantly experimenting and implementing different NLP schemes; word2vec being among the simplest and coincidently yielding great predictive value. The underpinnings of word2vec are exceptionally simple and the math is borderline elegant.</description></item><item><title>Mapping the Chili Regions of Cincinnati [two year update]</title><link>https://nathanrooy.github.io/posts/2018-02-01/chili-regions-of-cincinnati-updated/?utm_medium=rss</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2018-02-01/chili-regions-of-cincinnati-updated/?utm_medium=rss</guid><description>Roughly two yeas ago I wrote my first post on here, in which I created a voronoi diagram depicting the chili regions of Cincinnati. Each region corresponded to being closer to either Skyline Chili or Gold Star Chili. Since a voronoi tessellation is based off Euclidean distance (&amp;ldquo;as the crow flies&amp;rdquo;), its usefulness diminishes considerably when applied to street networks. Because we&amp;rsquo;re not yet traveling around using jetpacks, I modified the distance function to use something called network distance which is calculated using Dijkstra&amp;rsquo;s algorithm.</description></item><item><title>The Beautiful Commute: Visualizing one full year of bike commuting in Cincinnati</title><link>https://nathanrooy.github.io/posts/2018-01-11/one-year-of-bike-commuting/?utm_medium=rss</link><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2018-01-11/one-year-of-bike-commuting/?utm_medium=rss</guid><description>Introduction 2017 was an interesting year in terms of my daily commute. Although I unfortunately own a car, I refuse to waste my life mired in a quagmire of traffic like some kind of suburban commuter. This means I&amp;rsquo;m biking everywhere, or taking transit. But not like one of those weird weekend warriors dressed head to toe in fluorescent lycra, more like hoodie and sweat pants. What made 2017 interesting was the fact that not only did I move around several times, but being apart of a rapidly growing tech startup, so did my office.</description></item><item><title>Evolving Simple Organisms using a Genetic Algorithm and Deep Learning from Scratch with Python</title><link>https://nathanrooy.github.io/posts/2017-11-30/evolving-simple-organisms-using-a-genetic-algorithm-and-deep-learning/?utm_medium=rss</link><pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2017-11-30/evolving-simple-organisms-using-a-genetic-algorithm-and-deep-learning/?utm_medium=rss</guid><description>Introduction A few weeks ago I got pretty deep into a late night YouTube rabbit hole, and somewhere around evolving soft body robots, I came across this video (here). I&amp;rsquo;m not sure what if it was the peaceful background music or the hypnotizing motion of the dragonflies but I wanted to try and run the simulation on my local computer. After failing to find a GitHub repo for this, I decided to spend a few hours coding my own version in Python.</description></item><item><title>Do We Actually Need to Replace the Western Hills Viaduct?</title><link>https://nathanrooy.github.io/posts/2017-11-29/western-hills-viaduct-spatial-analysis/?utm_medium=rss</link><pubDate>Wed, 29 Nov 2017 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2017-11-29/western-hills-viaduct-spatial-analysis/?utm_medium=rss</guid><description>Introduction and Background If you live in the Cincinnati area, by now you should have heard that the Western Hills Viaduct is in a fairly dire situation at the moment and calls for a replacement have reached an almost fevered pitch. While all this squealing for a replacement has been going on, I couldn&amp;rsquo;t help but wonder if a replacement was actually what Cincinnati needs? As it currently stands, it requires $1 million per year just to maintain and a replacement is expected to cost $335 million.</description></item><item><title>Differential Evolution Optimization from Scratch with Python</title><link>https://nathanrooy.github.io/posts/2017-08-27/simple-differential-evolution-with-python/?utm_medium=rss</link><pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2017-08-27/simple-differential-evolution-with-python/?utm_medium=rss</guid><description>Besides particle swarm optimization (PSO) which I touched on previously, differential evolution (DE) is one of my go-to favorites. Just like PSO, differential evolution falls within the evolutionary algorithms (EA) family. Differential evolution is very similar to genetic algorithms (GA) which are based on the principles of evolutionary biology such as mutation, crossover, and selection. The downside of genetic algorithms is that at their core, they are based on a bit level information structure.</description></item><item><title>Mapping the Age of Cincinnati</title><link>https://nathanrooy.github.io/posts/2017-02-15/the-age-of-cincinnati/?utm_medium=rss</link><pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2017-02-15/the-age-of-cincinnati/?utm_medium=rss</guid><description>I&amp;rsquo;ve always been really impressed by those &amp;ldquo;age of&amp;hellip;&amp;rdquo; maps that I see from time to time on the internet (see here, here, and here) so I thought I would give it a go this winter while I had a little free time. Between web scraping and actual map creation it ended up taking a little over a month to finish.
Click (here) to launch a full screen version of the map in a new window.</description></item><item><title>Biking from Cleveland to Montréal</title><link>https://nathanrooy.github.io/posts/2016-12-22/bikepacking-cleveland-to-montreal/?utm_medium=rss</link><pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-12-22/bikepacking-cleveland-to-montreal/?utm_medium=rss</guid><description>Earlier this summer after quitting my job I had a two week window before a mandatory bachelor party in Vegas which I was determined to fill with something good. Thinking of all the places I could visit within just two weeks, Montréal seemed like the best option. But since Montréal is only a single days car ride, I thought I could make it interesting by biking there. Seems doable right?</description></item><item><title>Calculate the Distance Between Two GPS Points with Python (Vincenty’s Inverse Formula)</title><link>https://nathanrooy.github.io/posts/2016-12-18/vincenty-formula-with-python/?utm_medium=rss</link><pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-12-18/vincenty-formula-with-python/?utm_medium=rss</guid><description>Recently the work I have been doing requires a higher degree of accuracy than which the haversine method I was using could provide. This prompted me to implement a Python version of the Vincenty&amp;rsquo;s inverse formula. Unlike the Haversine method (which I posted about previously) of directly calculating the great-circle distance between two points on a perfectly spherical Earth, Vincenty&amp;rsquo;s formulae is an iterative method which more realistically assumes Earth as an oblate spheroid.</description></item><item><title>Mapping out the Southern Cultural Divide in America</title><link>https://nathanrooy.github.io/posts/2016-12-14/southern-cultural-divide/?utm_medium=rss</link><pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-12-14/southern-cultural-divide/?utm_medium=rss</guid><description>I just finished the book American Theocracy by Kevin Phillips (which is a seriously good book!) but in one of the chapters they included a map showing the regions of the United States which identify as “Southern” versus “American”. The map was originally created by J.S. Reed in 1975. They achieved this by looking through the yellow pages and counting the businesses that included &amp;ldquo;Southern&amp;rdquo; and &amp;ldquo;American&amp;rdquo;. From this data, they were able to create the contour map seen below (Google Books version here).</description></item><item><title>Creating parameterized 2D airfoils with quadratic Bézier curves and Python</title><link>https://nathanrooy.github.io/posts/2016-09-14/airfoil-manipulation-via-bezier-curves-with-python/?utm_medium=rss</link><pubDate>Wed, 14 Sep 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-09-14/airfoil-manipulation-via-bezier-curves-with-python/?utm_medium=rss</guid><description>Before any type of shape optimization can occur, the geometry needs to be parameterized (usually…). One of the easiest ways to accomplish this is through the use of Bézier curves. For this tutorial, we’re not going to manipulate an existing geometry, rather we’re going to generate the geometry from scratch using a series of connected Bézier curves called a composite Bézier curve.
A quadratic Bézier curve is defined using three control points.</description></item><item><title>Calculating the Distance Between Two GPS Coordinates with Python (Haversine Formula)</title><link>https://nathanrooy.github.io/posts/2016-09-07/haversine-with-python/?utm_medium=rss</link><pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-09-07/haversine-with-python/?utm_medium=rss</guid><description>A lot of my posts recently have focused on the analysis of spatial data coming from either the GPS on my phone (collected through Strava) or geo-tagged tweets. Because of this I ended up writing my own Python module for calculating the distance between two latitude/longitude pairs. This is accomplished using the Haversine formula. While more accurate methods exist for calculating the distance between two points on earths surface, the Haversine formula and Python implementation couldn’t be any simpler.</description></item><item><title>Montréal’s Language Distribution According to Twitter…</title><link>https://nathanrooy.github.io/posts/2016-09-01/language-of-montreal-according-to-twitter/?utm_medium=rss</link><pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-09-01/language-of-montreal-according-to-twitter/?utm_medium=rss</guid><description>Over the span of roughly eight months I was able to collect 1,116,442 tweets using the Tweepy Python library which facilitates easy access to the free Twitter API. If eight months sounds like a long time for only a ~1M tweets, that’s because the free Twitter API only gives access to roughly 1% of the total Twitter stream or “firehose”. Since saving the actual tweet goes against the user agreement, I only saved a lat/lon location and a language type within a single SQL database.</description></item><item><title>Cincy to Dayton and Back by Bike / My First Century!</title><link>https://nathanrooy.github.io/posts/2016-08-31/cincy-to-dayton-bike-ride/?utm_medium=rss</link><pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-08-31/cincy-to-dayton-bike-ride/?utm_medium=rss</guid><description>Since I had some time off recently, I decided to finally try and bike to Dayton and back in one day. I bike everyday to and from work, so the idea of biking long distances simply to log miles isn’t that appealing to me. I’m not some suburban spandex wearing weekend warrior with a bike rack on my car. Still, the challenge has taunted me for a while and it sounded fun.</description></item><item><title>Particle Swarm Optimization from Scratch with Python</title><link>https://nathanrooy.github.io/posts/2016-08-17/simple-particle-swarm-optimization-with-python/?utm_medium=rss</link><pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-08-17/simple-particle-swarm-optimization-with-python/?utm_medium=rss</guid><description>A tutorial that covers the basics of particle swarm optimization while implementing a simplified, barebones version with Python</description></item><item><title>Mapping the White Castle/Krystal Divide</title><link>https://nathanrooy.github.io/posts/2016-08-01/white-castle-krystal-divide/?utm_medium=rss</link><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-08-01/white-castle-krystal-divide/?utm_medium=rss</guid><description>Ahh White Castle. I’ve had a love/hate relationship with this place since college. Sometimes after a solid night of pillaging and conquering, nothing satisfies your hunger like those little square, steamed devil burgers. Give me a ten sack and life is good. Add in some tots and a side of ranch? Game over. Good night. As for Krystal, I had it once on the way to Panama for Spring Break. It was alright… And that’s the end of that story.</description></item><item><title>FiveThirtyEight: The Riddler (2016-July-08)</title><link>https://nathanrooy.github.io/posts/2016-07-08/the-riddler/?utm_medium=rss</link><pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-07-08/the-riddler/?utm_medium=rss</guid><description>I hate puzzles, but for some reason I find the Riddler from FiveThirtyEight more addicting than Flavor Blasted Goldfish. Anyway, I decided to post my solution for this week. Below is the question:
The archvillain Laser Larry threatens to imminently zap Riddler Headquarters (which, seen from above, is shaped like a regular pentagon with no courtyard or other funny business). He plans to do it with a high-powered, vertical planar ray that will slice the building exactly in half by area, as seen from above.</description></item><item><title>Mapping out IHOP vs. Waffle House</title><link>https://nathanrooy.github.io/posts/2016-03-23/ihop-vs-waffle-house/?utm_medium=rss</link><pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-03-23/ihop-vs-waffle-house/?utm_medium=rss</guid><description>So I had never actually been to a Waffle House until they put the one in across from Stab and Grab in Clifton. I have to say though, I’m questioning my loyalty to Toppers as my post-rage food source. The second time I went there it was all still so new to me that I splurged a bit and ordered “the left side of the menu”. It was the best meal of my life…</description></item><item><title>Dog Ownership in Cincinnati [map]</title><link>https://nathanrooy.github.io/posts/2016-03-12/dog-ownership-in-cincinnati/?utm_medium=rss</link><pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-03-12/dog-ownership-in-cincinnati/?utm_medium=rss</guid><description>In Cincinnati, there&amp;rsquo;s a pomeranian named Michelle Obama. There’s also a Beagle named Sarah Palin, a German Shepherd named Obwan Kenobi, and a Pit Bull Terrier named Beyoncé. Actually there’s a total of six dogs named Beyoncé in Cincinnati. Bart Simpson? Check. How about Bruno Mars? Several. Willie Nelson, Willy Wonka, and Winston Churchill? Yes, yes, and yes. How about a Chihuahua named Taco Bell? Yes, face palm… Applesauce, Sriracha, Tabasco, Trumpet, Trombone, Toto, Tripod, Shampoo, and Tony Montana?</description></item><item><title>Mapping the Chili Regions of Cincinnati</title><link>https://nathanrooy.github.io/posts/2016-02-03/chili-regions-of-cincinnati/?utm_medium=rss</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-02-03/chili-regions-of-cincinnati/?utm_medium=rss</guid><description>First post on my first blog ever! I created a voronoi diagram based off the locations of the two major chili chains in Cincinnati; Skyline and Gold Star. In simplest terms, the color correlates to which chili chain you’re closest to based off linear distance (not network distance). So whether your allegiance is with Skyline or Gold Star, the territories have been established!
Notes:
The restaurant latitude/longitude positions were scraped off Google Maps and imported into QGIS via a CSV layer.</description></item></channel></rss>