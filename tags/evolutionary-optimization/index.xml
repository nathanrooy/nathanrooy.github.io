<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>evolutionary optimization on</title><link>https://nathan.fun/tags/evolutionary-optimization/</link><description>Recent content in evolutionary optimization on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://nathan.fun/tags/evolutionary-optimization/index.xml" rel="self" type="application/rss+xml"/><item><title>Evolving Simple Organisms using a Genetic Algorithm and Deep Learning from Scratch with Python</title><link>https://nathan.fun/posts/2017-11-30/evolving-simple-organisms-using-a-genetic-algorithm-and-deep-learning/</link><pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate><guid>https://nathan.fun/posts/2017-11-30/evolving-simple-organisms-using-a-genetic-algorithm-and-deep-learning/</guid><description>Introduction A few weeks ago I got pretty deep into a late night YouTube rabbit hole, and somewhere around evolving soft body robots, I came across this video (here). I&amp;rsquo;m not sure what if it was the peaceful background music or the hypnotizing motion of the dragonflies but I wanted to try and run the simulation on my local computer. After failing to find a GitHub repo for this, I decided to spend a few hours coding my own version in Python.</description></item><item><title>Differential Evolution Optimization from Scratch with Python</title><link>https://nathan.fun/posts/2017-08-27/simple-differential-evolution-with-python/</link><pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate><guid>https://nathan.fun/posts/2017-08-27/simple-differential-evolution-with-python/</guid><description>Besides particle swarm optimization (PSO) which I touched on previously, differential evolution (DE) is one of my go-to favorites. Just like PSO, differential evolution falls within the evolutionary algorithms (EA) family. Differential evolution is very similar to genetic algorithms (GA) which are based on the principles of evolutionary biology such as mutation, crossover, and selection. The downside of genetic algorithms is that at their core, they are based on a bit level information structure.</description></item><item><title>Particle Swarm Optimization from Scratch with Python</title><link>https://nathan.fun/posts/2016-08-17/simple-particle-swarm-optimization-with-python/</link><pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate><guid>https://nathan.fun/posts/2016-08-17/simple-particle-swarm-optimization-with-python/</guid><description>Particle swarm optimization (PSO) is one of those rare tools that’s comically simple to code and implement while producing bizarrely good results. Developed in 1995 by Eberhart and Kennedy, PSO is a biologically inspired optimization routine designed to mimic birds flocking or fish schooling. I’ll occasionally use PSO for CFD based aerodynamic shape optimization, but more often than not, it’s for a machine learning project. PSO is not guaranteed to find the global minimum, but it does a solid job in challenging, high dimensional, non-convex, non-continuous environments.</description></item></channel></rss>