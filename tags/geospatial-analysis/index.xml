<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>geospatial analysis on</title><link>https://nathanrooy.github.io/tags/geospatial-analysis/</link><description>Recent content in geospatial analysis on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 14 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://nathanrooy.github.io/tags/geospatial-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>Calculate the Distance Between Two GPS Points with Python (Vincenty’s Inverse Formula)</title><link>https://nathanrooy.github.io/posts/2016-12-18/vincenty-formula-with-python/</link><pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-12-18/vincenty-formula-with-python/</guid><description>Recently the work I have been doing requires a higher degree of accuracy than which the haversine method I was using could provide. This prompted me to implement a Python version of the Vincenty&amp;rsquo;s inverse formula. Unlike the Haversine method (which I posted about previously) of directly calculating the great-circle distance between two points on a perfectly spherical Earth, Vincenty&amp;rsquo;s formulae is an iterative method which more realistically assumes Earth as an oblate spheroid.</description></item><item><title>Calculating the Distance Between Two GPS Coordinates with Python (Haversine Formula)</title><link>https://nathanrooy.github.io/posts/2016-09-07/haversine-with-python/</link><pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2016-09-07/haversine-with-python/</guid><description>A lot of my posts recently have focused on the analysis of spatial data coming from either the GPS on my phone (collected through Strava) or geo-tagged tweets. Because of this I ended up writing my own Python module for calculating the distance between two latitude/longitude pairs. This is accomplished using the Haversine formula. While more accurate methods exist for calculating the distance between two points on earths surface, the Haversine formula and Python implementation couldn’t be any simpler.</description></item></channel></rss>