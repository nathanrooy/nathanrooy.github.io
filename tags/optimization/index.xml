<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>optimization on</title><link>https://nathanrooy.github.io/tags/optimization/</link><description>Recent content in optimization on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nathanrooy.github.io/tags/optimization/index.xml" rel="self" type="application/rss+xml"/><item><title>Effective Simulated Annealing with Python</title><link>https://nathanrooy.github.io/posts/2020-05-14/simulated-annealing-with-python/</link><pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate><guid>https://nathanrooy.github.io/posts/2020-05-14/simulated-annealing-with-python/</guid><description>Introduction I use some form of optimization on a daily basis, whether it&amp;rsquo;s for work or personal projects. Something else I do on a daily basis is avoid simulated annealing. I&amp;rsquo;ve always associated simulated annealing with inefficiency. Yes, it&amp;rsquo;s a global optimizer, but at what cost? In most situations I&amp;rsquo;ve been able to achieve optimal or near-optimal results in a substantially quicker time using various other methods (particle swarm, genetic/evolutionary, etc&amp;hellip;).</description></item></channel></rss>